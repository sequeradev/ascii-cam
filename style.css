:root {
  --bg: #000;
  --panel: rgba(20, 20, 20, 0.85);
  --txt: #00ff00;
  --txt-alt: #fff;
  --accent: #00ff00;
  --border: #00ff00;
  --font: 'VT323', monospace;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html, body {
  height: 100%;
  background: var(--bg);
  color: var(--txt);
  font-family: var(--font);
  display: grid;
  grid-template-rows: auto 1fr auto;
  overflow: hidden;
  -webkit-tap-highlight-color: transparent;
}

header {
  background: var(--panel);
  padding: 12px 16px;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--border);
}

#title {
  font-size: clamp(24px, 8vw, 48px);
  letter-spacing: 4px;
  text-shadow: 0 0 8px var(--accent);
  animation: glow 2s ease-in-out infinite alternate;
}

@keyframes glow {
  from {
    text-shadow: 0 0 8px var(--accent);
  }
  to {
    text-shadow: 0 0 16px var(--accent), 0 0 24px var(--accent);
  }
}

main {
  display: flex;
  flex-direction: column;
  align-items: center;
  /* Use flex-start so the ascii area can grow naturally while
     controls sit at the bottom when space allows. Removing
     space-between prevents large gaps on mobile screens */
  justify-content: flex-start;
  height: 100%;
  padding: 16px 8px 8px 8px;
  gap: 16px;
}

/*
 * The ascii wrapper is a flexible container that fills the remaining
 * vertical space between the header, controls and footer. We set
 * `position: relative` so that its child (#ascii) can be absolutely
 * positioned for precise centering and scaling. Setting a fixed
 * height ensures the wrapper grows to consume available space on
 * mobile devices without causing overflow that would require
 * scrolling.
 */
#asciiWrapper {
  flex: 1;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: relative;
  min-height: 0;
}

/*
 * The ascii element contains the generated ASCII art. We position it
 * absolutely at the centre of its wrapper and use a transform to
 * translate it by 50% of its own width/height so that scaling
 * originates from the centre. `transform-origin: top left` keeps
 * subsequent scale transformations consistent. Initially hidden until
 * the camera is active.
 */
#ascii {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transform-origin: top left;
  white-space: pre;
  user-select: none;
  line-height: 1;
  text-shadow: 0 0 3px currentColor;
  font-family: var(--font);
  color: var(--txt);
  animation: flicker-text 0.15s infinite;
  display: none;
}

#ascii.active {
  display: inline-block;
}

@keyframes flicker-text {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.97;
  }
}

@keyframes glitch {
  0% {
    transform: translate(0);
  }
  20% {
    transform: translate(-2px, 2px);
  }
  40% {
    transform: translate(-2px, -2px);
  }
  60% {
    transform: translate(2px, 2px);
  }
  80% {
    transform: translate(2px, -2px);
  }
  100% {
    transform: translate(0);
  }
}

#controls {
  width: 100%;
  max-width: 500px;
  background: var(--panel);
  border: 2px solid var(--border);
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);

  /* Push the controls to the bottom of the page when there is
     extra vertical space. This gives the ASCII area priority and
     helps utilise full screen height on mobile devices. */
  margin-top: auto;
}

.control-group {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.control-label {
  font-size: 18px;
  letter-spacing: 2px;
  text-transform: uppercase;
  color: var(--accent);
}

.res-buttons {
  display: flex;
  gap: 8px;
  width: 100%;
}

.res-btn {
  flex: 1;
  padding: 12px 16px;
  font-size: 16px;
  background: #111;
  border: 2px solid var(--border);
  color: var(--txt);
  transition: all 0.2s;
}

.res-btn:hover {
  background: #1a1a1a;
  box-shadow: 0 0 10px rgba(0, 255, 0, 0.3);
}

.res-btn.active {
  background: var(--accent);
  color: #000;
  border-color: var(--accent);
  box-shadow: 0 0 15px var(--accent);
  font-weight: bold;
}

.control-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
}

.btn {
  background: var(--bg);
  border: 2px solid var(--border);
  color: var(--accent);
  padding: 12px 20px;
  font-size: 18px;
  font-family: var(--font);
  letter-spacing: 2px;
  cursor: pointer;
  transition: all 0.2s;
  text-transform: uppercase;
  box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);
}

.btn:hover {
  background: var(--accent);
  color: var(--bg);
  box-shadow: 0 0 20px var(--accent);
  transform: translateY(-2px);
}

.btn:active {
  transform: translateY(0);
}

.start-btn {
  width: 100%;
  font-size: 22px;
  padding: 16px;
  display: none;
}

.start-btn.visible {
  display: block;
}

video {
  display: none;
}

footer {
  background: var(--panel);
  text-align: center;
  padding: 12px 8px;
  font-size: 18px;
  border-top: 2px solid var(--border);
}

footer a {
  color: var(--accent);
  text-decoration: none;
  letter-spacing: 1px;
  transition: all 0.2s;
}

footer a:hover {
  text-shadow: 0 0 8px var(--accent);
}

@media (max-width: 600px) {
  main {
    padding: 12px 8px 8px 8px;
    gap: 12px;
  }

  #controls {
    max-width: 100%;
    padding: 12px;
  }

  .btn {
    font-size: 16px;
    padding: 10px 16px;
  }

  #title {
    font-size: clamp(20px, 8vw, 32px);
    letter-spacing: 2px;
  }
}

@media (max-width: 400px) {
  #controls {
    padding: 10px;
  }

  .control-label {
    font-size: 16px;
  }

  .value-display {
    font-size: 18px;
  }
}
